#!/usr/bin/env bash
toolCheck() {
	type -P curl >/dev/null 2>&1 || { echo "ERROR:  curl required and not found"; exit 1; }
	type -P jq >/dev/null 2>&1 || { echo "ERROR:  jq required and not found"; exit 1; }
}
exitScript() { # $1=EXIT_REASON $2=EXIT_DETAILS
	[ "$1" == "USAGE" ] && {
		[ "$2" != "" ] && echo -e "ERROR: $2\n"
		echo -e "USAGE: $(echo $0 | sed -E 's#^.*/##') API_KEY CUSTOMER_ID"
		exit 1
	}
	[ "$1" == "" ] && echo -e "$2" || echo -e "$1: $2"
	exit 0
}
checkJson() { # $1=JSON_TO_BE_CHECKED
	TEMP="$(echo $1 | jq -c '.')"
	[[ (("$TEMP" =~ ^\[)&&("$TEMP" =~ \]$))||(("$TEMP" =~ ^\{)&&("$TEMP" =~ \}$)) ]] || exitScript "ERROR" "$2"
}
checkApiResult() {
	[ "$(echo "$OUTPUT" | jq -r 'if (.msg != null) then "1" else "" end')" == "" ] && return
	exitScript "ERROR" "API Call failed: $1\n$(echo "$OUTPUT" | jq '.')"
}
callApi() { # $1=API_KEY $2=HTTP_METHOD $3=API_PATH $4=JSON_DATA
	if [ "$#" -eq 3 ]; then
		OUTPUT=$(curl -q -s -g -X$2 -H "Fastly-Key: $1" "https://api.fastly.com$3")
	elif [ "$#" -eq 4 ]; then
		OUTPUT=$(curl -q -s -g -X$2 -H "Fastly-Key: $1" -H "Content-Type: application/vnd.api+json" -d "$4" "https://api.fastly.com$3")
	else
		exitScript "ERROR" "callApi expected 3 or 4 arguments and $# were found"
	fi
	checkJson "$OUTPUT" "API call \"$3\" failed"
	[ "$(echo "$OUTPUT" | jq -r 'type')" == "object" ] && checkApiResult "$2 $3"
}
# Main Code Starts Here
[[ "$#" -ne 2 ]] && exitScript "USAGE"
toolCheck
callApi "$1" "GET" "/customer/$2/services"
echo "$OUTPUT" | jq -r '.[]|"\(.id),\(.name)"'